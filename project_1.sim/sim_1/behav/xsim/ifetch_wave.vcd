$date
   Sat Apr 26 22:42:11 2025
$end
$version
  2017.4
$end
$timescale
  1ps
$end
$scope module IFetch_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var reg 1 # branch $end
$var reg 1 $ zero $end
$var reg 32 % imm32 [31:0] $end
$var wire 32 & instruction [31:0] $end
$scope module uut $end
$var wire 1 ' clk $end
$var wire 1 ( rst $end
$var wire 1 ) branch $end
$var wire 1 * zero $end
$var wire 32 + imm32 [31:0] $end
$var wire 32 & instruction [31:0] $end
$var reg 32 , pc [31:0] $end
$scope module urom $end
$var wire 1 ' clka $end
$var wire 14 - addra [13:0] $end
$var wire 32 & douta [31:0] $end
$scope module inst $end
$var wire 1 ' clka $end
$var wire 1 . rsta $end
$var wire 1 / ena $end
$var wire 1 0 regcea $end
$var wire 1 1 wea [0:0] $end
$var wire 14 - addra [13:0] $end
$var wire 32 2 dina [31:0] $end
$var wire 32 & douta [31:0] $end
$var wire 1 3 clkb $end
$var wire 1 4 rstb $end
$var wire 1 5 enb $end
$var wire 1 6 regceb $end
$var wire 1 7 web [0:0] $end
$var wire 14 8 addrb [13:0] $end
$var wire 32 9 dinb [31:0] $end
$var wire 32 : doutb [31:0] $end
$var wire 1 ; injectsbiterr $end
$var wire 1 < injectdbiterr $end
$var wire 1 = sbiterr $end
$var wire 1 > dbiterr $end
$var wire 14 ? rdaddrecc [13:0] $end
$var wire 1 @ eccpipece $end
$var wire 1 A sleep $end
$var wire 1 B deepsleep $end
$var wire 1 C shutdown $end
$var wire 1 D rsta_busy $end
$var wire 1 E rstb_busy $end
$var wire 1 F s_aclk $end
$var wire 1 G s_aresetn $end
$var wire 4 H s_axi_awid [3:0] $end
$var wire 32 I s_axi_awaddr [31:0] $end
$var wire 8 J s_axi_awlen [7:0] $end
$var wire 3 K s_axi_awsize [2:0] $end
$var wire 2 L s_axi_awburst [1:0] $end
$var wire 1 M s_axi_awvalid $end
$var wire 1 N s_axi_awready $end
$var wire 32 O s_axi_wdata [31:0] $end
$var wire 1 P s_axi_wstrb [0:0] $end
$var wire 1 Q s_axi_wlast $end
$var wire 1 R s_axi_wvalid $end
$var wire 1 S s_axi_wready $end
$var wire 4 T s_axi_bid [3:0] $end
$var wire 2 U s_axi_bresp [1:0] $end
$var wire 1 V s_axi_bvalid $end
$var wire 1 W s_axi_bready $end
$var wire 4 X s_axi_arid [3:0] $end
$var wire 32 Y s_axi_araddr [31:0] $end
$var wire 8 Z s_axi_arlen [7:0] $end
$var wire 3 [ s_axi_arsize [2:0] $end
$var wire 2 \ s_axi_arburst [1:0] $end
$var wire 1 ] s_axi_arvalid $end
$var wire 1 ^ s_axi_arready $end
$var wire 4 _ s_axi_rid [3:0] $end
$var wire 32 ` s_axi_rdata [31:0] $end
$var wire 2 a s_axi_rresp [1:0] $end
$var wire 1 b s_axi_rlast $end
$var wire 1 c s_axi_rvalid $end
$var wire 1 d s_axi_rready $end
$var wire 1 e s_axi_injectsbiterr $end
$var wire 1 f s_axi_injectdbiterr $end
$var wire 1 g s_axi_sbiterr $end
$var wire 1 h s_axi_dbiterr $end
$var wire 14 i s_axi_rdaddrecc [13:0] $end
$var wire 1 j SBITERR $end
$var wire 1 k DBITERR $end
$var wire 1 l S_AXI_AWREADY $end
$var wire 1 m S_AXI_WREADY $end
$var wire 1 n S_AXI_BVALID $end
$var wire 1 o S_AXI_ARREADY $end
$var wire 1 p S_AXI_RLAST $end
$var wire 1 q S_AXI_RVALID $end
$var wire 1 r S_AXI_SBITERR $end
$var wire 1 s S_AXI_DBITERR $end
$var wire 1 t WEA [0:0] $end
$var wire 14 u ADDRA [13:0] $end
$var wire 32 v DINA [31:0] $end
$var wire 32 w DOUTA [31:0] $end
$var wire 1 x WEB [0:0] $end
$var wire 14 y ADDRB [13:0] $end
$var wire 32 z DINB [31:0] $end
$var wire 32 { DOUTB [31:0] $end
$var wire 14 | RDADDRECC [13:0] $end
$var wire 4 } S_AXI_AWID [3:0] $end
$var wire 32 ~ S_AXI_AWADDR [31:0] $end
$var wire 8 !! S_AXI_AWLEN [7:0] $end
$var wire 3 "! S_AXI_AWSIZE [2:0] $end
$var wire 2 #! S_AXI_AWBURST [1:0] $end
$var wire 32 $! S_AXI_WDATA [31:0] $end
$var wire 1 %! S_AXI_WSTRB [0:0] $end
$var wire 4 &! S_AXI_BID [3:0] $end
$var wire 2 '! S_AXI_BRESP [1:0] $end
$var wire 4 (! S_AXI_ARID [3:0] $end
$var wire 32 )! S_AXI_ARADDR [31:0] $end
$var wire 8 *! S_AXI_ARLEN [7:0] $end
$var wire 3 +! S_AXI_ARSIZE [2:0] $end
$var wire 2 ,! S_AXI_ARBURST [1:0] $end
$var wire 4 -! S_AXI_RID [3:0] $end
$var wire 32 .! S_AXI_RDATA [31:0] $end
$var wire 2 /! S_AXI_RRESP [1:0] $end
$var wire 14 0! S_AXI_RDADDRECC [13:0] $end
$var wire 1 1! WEB_parameterized [0:0] $end
$var wire 1 2! ECCPIPECE $end
$var wire 1 3! SLEEP $end
$var reg 1 4! RSTA_BUSY $end
$var reg 1 5! RSTB_BUSY $end
$var wire 1 6! CLKA $end
$var wire 1 7! RSTA $end
$var wire 1 8! ENA $end
$var wire 1 9! REGCEA $end
$var wire 1 :! CLKB $end
$var wire 1 ;! RSTB $end
$var wire 1 <! ENB $end
$var wire 1 =! REGCEB $end
$var wire 1 >! INJECTSBITERR $end
$var wire 1 ?! INJECTDBITERR $end
$var wire 1 @! S_ACLK $end
$var wire 1 A! S_ARESETN $end
$var wire 1 B! S_AXI_AWVALID $end
$var wire 1 C! S_AXI_WLAST $end
$var wire 1 D! S_AXI_WVALID $end
$var wire 1 E! S_AXI_BREADY $end
$var wire 1 F! S_AXI_ARVALID $end
$var wire 1 G! S_AXI_RREADY $end
$var wire 1 H! S_AXI_INJECTSBITERR $end
$var wire 1 I! S_AXI_INJECTDBITERR $end
$var reg 1 J! injectsbiterr_in $end
$var reg 1 K! injectdbiterr_in $end
$var reg 1 L! rsta_in $end
$var reg 1 M! ena_in $end
$var reg 1 N! regcea_in $end
$var reg 1 O! wea_in [0:0] $end
$var reg 14 P! addra_in [13:0] $end
$var reg 32 Q! dina_in [31:0] $end
$var wire 14 R! s_axi_awaddr_out_c [13:0] $end
$var wire 14 S! s_axi_araddr_out_c [13:0] $end
$var wire 1 T! s_axi_wr_en_c $end
$var wire 1 U! s_axi_rd_en_c $end
$var wire 1 V! s_aresetn_a_c $end
$var wire 8 W! s_axi_arlen_c [7:0] $end
$var wire 4 X! s_axi_rid_c [3:0] $end
$var wire 32 Y! s_axi_rdata_c [31:0] $end
$var wire 2 Z! s_axi_rresp_c [1:0] $end
$var wire 1 [! s_axi_rlast_c $end
$var wire 1 \! s_axi_rvalid_c $end
$var wire 1 ]! s_axi_rready_c $end
$var wire 1 ^! regceb_c $end
$var wire 7 _! s_axi_payload_c [6:0] $end
$var wire 7 `! m_axi_payload_c [6:0] $end
$var reg 5 a! RSTA_SHFT_REG [4:0] $end
$var reg 1 b! POR_A $end
$var reg 5 c! RSTB_SHFT_REG [4:0] $end
$var reg 1 d! POR_B $end
$var reg 1 e! ENA_dly $end
$var reg 1 f! ENA_dly_D $end
$var reg 1 g! ENB_dly $end
$var reg 1 h! ENB_dly_D $end
$var wire 1 i! RSTA_I_SAFE $end
$var wire 1 j! RSTB_I_SAFE $end
$var wire 1 k! ENA_I_SAFE $end
$var wire 1 l! ENB_I_SAFE $end
$var reg 1 m! ram_rstram_a_busy $end
$var reg 1 n! ram_rstreg_a_busy $end
$var reg 1 o! ram_rstram_b_busy $end
$var reg 1 p! ram_rstreg_b_busy $end
$var reg 1 q! ENA_dly_reg $end
$var reg 1 r! ENB_dly_reg $end
$var reg 1 s! ENA_dly_reg_D $end
$var reg 1 t! ENB_dly_reg_D $end
$var parameter 144 u! C_CORENAME [143:0] $end
$var parameter 48 v! C_FAMILY [47:0] $end
$var parameter 48 w! C_XDEVICEFAMILY [47:0] $end
$var parameter 16 x! C_ELABORATION_DIR [15:0] $end
$var parameter 32 y! C_INTERFACE_TYPE [31:0] $end
$var parameter 32 z! C_USE_BRAM_BLOCK [31:0] $end
$var parameter 32 {! C_CTRL_ECC_ALGO [31:0] $end
$var parameter 32 |! C_ENABLE_32BIT_ADDRESS [31:0] $end
$var parameter 32 }! C_AXI_TYPE [31:0] $end
$var parameter 32 ~! C_AXI_SLAVE_TYPE [31:0] $end
$var parameter 32 !" C_HAS_AXI_ID [31:0] $end
$var parameter 32 "" C_AXI_ID_WIDTH [31:0] $end
$var parameter 32 #" C_MEM_TYPE [31:0] $end
$var parameter 32 $" C_BYTE_SIZE [31:0] $end
$var parameter 32 %" C_ALGORITHM [31:0] $end
$var parameter 32 &" C_PRIM_TYPE [31:0] $end
$var parameter 32 '" C_LOAD_INIT_FILE [31:0] $end
$var parameter 80 (" C_INIT_FILE_NAME [79:0] $end
$var parameter 80 )" C_INIT_FILE [79:0] $end
$var parameter 32 *" C_USE_DEFAULT_DATA [31:0] $end
$var parameter 8 +" C_DEFAULT_DATA [7:0] $end
$var parameter 32 ," C_HAS_RSTA [31:0] $end
$var parameter 16 -" C_RST_PRIORITY_A [15:0] $end
$var parameter 32 ." C_RSTRAM_A [31:0] $end
$var parameter 8 /" C_INITA_VAL [7:0] $end
$var parameter 32 0" C_HAS_ENA [31:0] $end
$var parameter 32 1" C_HAS_REGCEA [31:0] $end
$var parameter 32 2" C_USE_BYTE_WEA [31:0] $end
$var parameter 32 3" C_WEA_WIDTH [31:0] $end
$var parameter 88 4" C_WRITE_MODE_A [87:0] $end
$var parameter 32 5" C_WRITE_WIDTH_A [31:0] $end
$var parameter 32 6" C_READ_WIDTH_A [31:0] $end
$var parameter 32 7" C_WRITE_DEPTH_A [31:0] $end
$var parameter 32 8" C_READ_DEPTH_A [31:0] $end
$var parameter 32 9" C_ADDRA_WIDTH [31:0] $end
$var parameter 32 :" C_HAS_RSTB [31:0] $end
$var parameter 16 ;" C_RST_PRIORITY_B [15:0] $end
$var parameter 32 <" C_RSTRAM_B [31:0] $end
$var parameter 8 =" C_INITB_VAL [7:0] $end
$var parameter 32 >" C_HAS_ENB [31:0] $end
$var parameter 32 ?" C_HAS_REGCEB [31:0] $end
$var parameter 32 @" C_USE_BYTE_WEB [31:0] $end
$var parameter 32 A" C_WEB_WIDTH [31:0] $end
$var parameter 88 B" C_WRITE_MODE_B [87:0] $end
$var parameter 32 C" C_WRITE_WIDTH_B [31:0] $end
$var parameter 32 D" C_READ_WIDTH_B [31:0] $end
$var parameter 32 E" C_WRITE_DEPTH_B [31:0] $end
$var parameter 32 F" C_READ_DEPTH_B [31:0] $end
$var parameter 32 G" C_ADDRB_WIDTH [31:0] $end
$var parameter 32 H" C_HAS_MEM_OUTPUT_REGS_A [31:0] $end
$var parameter 32 I" C_HAS_MEM_OUTPUT_REGS_B [31:0] $end
$var parameter 32 J" C_HAS_MUX_OUTPUT_REGS_A [31:0] $end
$var parameter 32 K" C_HAS_MUX_OUTPUT_REGS_B [31:0] $end
$var parameter 32 L" C_HAS_SOFTECC_INPUT_REGS_A [31:0] $end
$var parameter 32 M" C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 N" C_MUX_PIPELINE_STAGES [31:0] $end
$var parameter 32 O" C_USE_SOFTECC [31:0] $end
$var parameter 32 P" C_USE_ECC [31:0] $end
$var parameter 32 Q" C_EN_ECC_PIPE [31:0] $end
$var parameter 32 R" C_HAS_INJECTERR [31:0] $end
$var parameter 24 S" C_SIM_COLLISION_CHECK [23:0] $end
$var parameter 32 T" C_COMMON_CLK [31:0] $end
$var parameter 32 U" C_DISABLE_WARN_BHV_COLL [31:0] $end
$var parameter 32 V" C_EN_SLEEP_PIN [31:0] $end
$var parameter 32 W" C_USE_URAM [31:0] $end
$var parameter 32 X" C_EN_RDADDRA_CHG [31:0] $end
$var parameter 32 Y" C_EN_RDADDRB_CHG [31:0] $end
$var parameter 32 Z" C_EN_DEEPSLEEP_PIN [31:0] $end
$var parameter 32 [" C_EN_SHUTDOWN_PIN [31:0] $end
$var parameter 32 \" C_EN_SAFETY_CKT [31:0] $end
$var parameter 16 ]" C_COUNT_36K_BRAM [15:0] $end
$var parameter 8 ^" C_COUNT_18K_BRAM [7:0] $end
$var parameter 344 _" C_EST_POWER_SUMMARY [343:0] $end
$var parameter 32 `" C_DISABLE_WARN_BHV_RANGE [31:0] $end
$var parameter 32 a" FLOP_DELAY [31:0] $end
$var parameter 32 b" C_AXI_PAYLOAD [31:0] $end
$var parameter 32 c" AXI_FULL_MEMORY_SLAVE [31:0] $end
$var parameter 32 d" C_AXI_ADDR_WIDTH_MSB [31:0] $end
$var parameter 32 e" C_AXI_ADDR_WIDTH [31:0] $end
$var parameter 32 f" LOWER_BOUND_VAL [31:0] $end
$var parameter 32 g" C_AXI_ADDR_WIDTH_LSB [31:0] $end
$var parameter 32 h" C_AXI_OS_WR [31:0] $end
$scope module native_mem_module.blk_mem_gen_v8_4_1_inst $end
$var wire 1 6! CLKA $end
$var wire 1 i! RSTA $end
$var wire 1 k! ENA $end
$var wire 1 i" REGCEA $end
$var wire 1 j" WEA [0:0] $end
$var wire 14 k" ADDRA [13:0] $end
$var wire 32 l" DINA [31:0] $end
$var wire 32 w DOUTA [31:0] $end
$var wire 1 :! CLKB $end
$var wire 1 j! RSTB $end
$var wire 1 l! ENB $end
$var wire 1 =! REGCEB $end
$var wire 1 x WEB [0:0] $end
$var wire 14 y ADDRB [13:0] $end
$var wire 32 z DINB [31:0] $end
$var wire 32 { DOUTB [31:0] $end
$var wire 1 m" INJECTSBITERR $end
$var wire 1 n" INJECTDBITERR $end
$var wire 1 2! ECCPIPECE $end
$var wire 1 3! SLEEP $end
$var wire 1 j SBITERR $end
$var wire 1 k DBITERR $end
$var wire 14 | RDADDRECC [13:0] $end
$var reg 39 o" doublebit_error [38:0] $end
$var reg 32 p" memory_out_a [31:0] $end
$var reg 32 q" memory_out_b [31:0] $end
$var reg 1 r" sbiterr_in $end
$var wire 1 s" sbiterr_sdp $end
$var reg 1 t" dbiterr_in $end
$var wire 1 u" dbiterr_sdp $end
$var wire 32 v" dout_i [31:0] $end
$var wire 1 w" dbiterr_i $end
$var wire 1 x" sbiterr_i $end
$var wire 14 y" rdaddrecc_i [13:0] $end
$var reg 14 z" rdaddrecc_in [13:0] $end
$var wire 14 {" rdaddrecc_sdp [13:0] $end
$var reg 32 |" inita_val [31:0] $end
$var reg 32 }" initb_val [31:0] $end
$var reg 1 ~" is_collision $end
$var reg 1 !# is_collision_a $end
$var reg 1 "# is_collision_delay_a $end
$var reg 1 ## is_collision_b $end
$var reg 1 $# is_collision_delay_b $end
$var integer 32 %# status $end
$var integer 32 &# initfile $end
$var integer 32 '# meminitfile $end
$var reg 32 (# mif_data [31:0] $end
$var reg 32 )# mem_data [31:0] $end
$var reg 256 *# inita_str [255:0] $end
$var reg 256 +# initb_str [255:0] $end
$var reg 256 ,# default_data_str [255:0] $end
$var reg 8184 -# init_file_str [8183:0] $end
$var reg 8184 .# mem_init_file_str [8183:0] $end
$var integer 32 /# cnt $end
$var integer 32 0# write_addr_a_width $end
$var integer 32 1# read_addr_a_width $end
$var integer 32 2# write_addr_b_width $end
$var integer 32 3# read_addr_b_width $end
$var wire 1 4# ena_i $end
$var wire 1 5# enb_i $end
$var wire 1 6# reseta_i $end
$var wire 1 7# resetb_i $end
$var wire 1 8# wea_i [0:0] $end
$var wire 1 9# web_i [0:0] $end
$var wire 1 :# rea_i $end
$var wire 1 ;# reb_i $end
$var wire 1 <# rsta_outp_stage $end
$var wire 1 =# rstb_outp_stage $end
$var wire 14 ># \async_coll.addra_delay  [13:0] $end
$var wire 1 ?# \async_coll.wea_delay  [0:0] $end
$var wire 1 @# \async_coll.ena_delay  $end
$var wire 14 A# \async_coll.addrb_delay  [13:0] $end
$var wire 1 B# \async_coll.web_delay  [0:0] $end
$var wire 1 C# \async_coll.enb_delay  $end
$var parameter 144 D# C_CORENAME [143:0] $end
$var parameter 48 E# C_FAMILY [47:0] $end
$var parameter 48 F# C_XDEVICEFAMILY [47:0] $end
$var parameter 32 G# C_MEM_TYPE [31:0] $end
$var parameter 32 H# C_BYTE_SIZE [31:0] $end
$var parameter 32 I# C_USE_BRAM_BLOCK [31:0] $end
$var parameter 32 J# C_ALGORITHM [31:0] $end
$var parameter 32 K# C_PRIM_TYPE [31:0] $end
$var parameter 32 L# C_LOAD_INIT_FILE [31:0] $end
$var parameter 80 M# C_INIT_FILE_NAME [79:0] $end
$var parameter 80 N# C_INIT_FILE [79:0] $end
$var parameter 32 O# C_USE_DEFAULT_DATA [31:0] $end
$var parameter 8 P# C_DEFAULT_DATA [7:0] $end
$var parameter 32 Q# C_RST_TYPE [31:0] $end
$var parameter 32 R# C_HAS_RSTA [31:0] $end
$var parameter 16 S# C_RST_PRIORITY_A [15:0] $end
$var parameter 32 T# C_RSTRAM_A [31:0] $end
$var parameter 8 U# C_INITA_VAL [7:0] $end
$var parameter 32 V# C_HAS_ENA [31:0] $end
$var parameter 32 W# C_HAS_REGCEA [31:0] $end
$var parameter 32 X# C_USE_BYTE_WEA [31:0] $end
$var parameter 32 Y# C_WEA_WIDTH [31:0] $end
$var parameter 88 Z# C_WRITE_MODE_A [87:0] $end
$var parameter 32 [# C_WRITE_WIDTH_A [31:0] $end
$var parameter 32 \# C_READ_WIDTH_A [31:0] $end
$var parameter 32 ]# C_WRITE_DEPTH_A [31:0] $end
$var parameter 32 ^# C_READ_DEPTH_A [31:0] $end
$var parameter 32 _# C_ADDRA_WIDTH [31:0] $end
$var parameter 32 `# C_HAS_RSTB [31:0] $end
$var parameter 16 a# C_RST_PRIORITY_B [15:0] $end
$var parameter 32 b# C_RSTRAM_B [31:0] $end
$var parameter 8 c# C_INITB_VAL [7:0] $end
$var parameter 32 d# C_HAS_ENB [31:0] $end
$var parameter 32 e# C_HAS_REGCEB [31:0] $end
$var parameter 32 f# C_USE_BYTE_WEB [31:0] $end
$var parameter 32 g# C_WEB_WIDTH [31:0] $end
$var parameter 88 h# C_WRITE_MODE_B [87:0] $end
$var parameter 32 i# C_WRITE_WIDTH_B [31:0] $end
$var parameter 32 j# C_READ_WIDTH_B [31:0] $end
$var parameter 32 k# C_WRITE_DEPTH_B [31:0] $end
$var parameter 32 l# C_READ_DEPTH_B [31:0] $end
$var parameter 32 m# C_ADDRB_WIDTH [31:0] $end
$var parameter 32 n# C_HAS_MEM_OUTPUT_REGS_A [31:0] $end
$var parameter 32 o# C_HAS_MEM_OUTPUT_REGS_B [31:0] $end
$var parameter 32 p# C_HAS_MUX_OUTPUT_REGS_A [31:0] $end
$var parameter 32 q# C_HAS_MUX_OUTPUT_REGS_B [31:0] $end
$var parameter 32 r# C_HAS_SOFTECC_INPUT_REGS_A [31:0] $end
$var parameter 32 s# C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 t# C_MUX_PIPELINE_STAGES [31:0] $end
$var parameter 32 u# C_USE_SOFTECC [31:0] $end
$var parameter 32 v# C_USE_ECC [31:0] $end
$var parameter 32 w# C_HAS_INJECTERR [31:0] $end
$var parameter 24 x# C_SIM_COLLISION_CHECK [23:0] $end
$var parameter 32 y# C_COMMON_CLK [31:0] $end
$var parameter 32 z# FLOP_DELAY [31:0] $end
$var parameter 32 {# C_DISABLE_WARN_BHV_COLL [31:0] $end
$var parameter 32 |# C_EN_ECC_PIPE [31:0] $end
$var parameter 32 }# C_DISABLE_WARN_BHV_RANGE [31:0] $end
$var parameter 32 ~# ADDRFILE [31:0] $end
$var parameter 32 !$ COLLFILE [31:0] $end
$var parameter 32 "$ ERRFILE [31:0] $end
$var parameter 32 #$ COLL_DELAY [31:0] $end
$var parameter 32 $$ CHKBIT_WIDTH [31:0] $end
$var parameter 32 %$ MIN_WIDTH_A [31:0] $end
$var parameter 32 &$ MIN_WIDTH_B [31:0] $end
$var parameter 32 '$ MIN_WIDTH [31:0] $end
$var parameter 32 ($ MAX_DEPTH_A [31:0] $end
$var parameter 32 )$ MAX_DEPTH_B [31:0] $end
$var parameter 32 *$ MAX_DEPTH [31:0] $end
$var parameter 32 +$ WRITE_WIDTH_RATIO_A [31:0] $end
$var parameter 32 ,$ READ_WIDTH_RATIO_A [31:0] $end
$var parameter 32 -$ WRITE_WIDTH_RATIO_B [31:0] $end
$var parameter 32 .$ READ_WIDTH_RATIO_B [31:0] $end
$var parameter 32 /$ WRITE_ADDR_A_DIV [31:0] $end
$var parameter 32 0$ READ_ADDR_A_DIV [31:0] $end
$var parameter 32 1$ WRITE_ADDR_B_DIV [31:0] $end
$var parameter 32 2$ READ_ADDR_B_DIV [31:0] $end
$var parameter 32 3$ BYTE_SIZE [31:0] $end
$var parameter 56 4$ C_FAMILY_LOCALPARAM [55:0] $end
$var parameter 0 5$ SINGLE_PORT $end
$var parameter 0 6$ IS_ROM $end
$var parameter 0 7$ HAS_A_WRITE $end
$var parameter 0 8$ HAS_B_WRITE $end
$var parameter 0 9$ HAS_A_READ $end
$var parameter 0 :$ HAS_B_READ $end
$var parameter 0 ;$ HAS_B_PORT $end
$var parameter 32 <$ MUX_PIPELINE_STAGES_A [31:0] $end
$var parameter 32 =$ MUX_PIPELINE_STAGES_B [31:0] $end
$var parameter 32 >$ NUM_OUTPUT_STAGES_A [31:0] $end
$var parameter 32 ?$ NUM_OUTPUT_STAGES_B [31:0] $end
$scope module reg_a $end
$var wire 1 6! CLK $end
$var wire 1 <# RST $end
$var wire 1 k! EN $end
$var wire 1 i" REGCE $end
$var wire 32 @$ DIN_I [31:0] $end
$var reg 32 A$ DOUT [31:0] $end
$var wire 1 B$ SBITERR_IN_I $end
$var wire 1 C$ DBITERR_IN_I $end
$var reg 1 D$ SBITERR $end
$var reg 1 E$ DBITERR $end
$var wire 14 F$ RDADDRECC_IN_I [13:0] $end
$var wire 1 G$ ECCPIPECE $end
$var reg 14 H$ RDADDRECC [13:0] $end
$var reg 32 I$ out_regs [31:0] $end
$var reg 14 J$ rdaddrecc_regs [13:0] $end
$var reg 1 K$ sbiterr_regs [0:0] $end
$var reg 1 L$ dbiterr_regs [0:0] $end
$var reg 256 M$ init_str [255:0] $end
$var reg 32 N$ init_val [31:0] $end
$var wire 1 O$ en_i $end
$var wire 1 P$ regce_i $end
$var wire 1 Q$ rst_i $end
$var reg 32 R$ DIN [31:0] $end
$var reg 14 S$ RDADDRECC_IN [13:0] $end
$var reg 1 T$ SBITERR_IN $end
$var reg 1 U$ DBITERR_IN $end
$var parameter 48 V$ C_FAMILY [47:0] $end
$var parameter 48 W$ C_XDEVICEFAMILY [47:0] $end
$var parameter 32 X$ C_RST_TYPE [31:0] $end
$var parameter 32 Y$ C_HAS_RST [31:0] $end
$var parameter 32 Z$ C_RSTRAM [31:0] $end
$var parameter 16 [$ C_RST_PRIORITY [15:0] $end
$var parameter 8 \$ C_INIT_VAL [7:0] $end
$var parameter 32 ]$ C_HAS_EN [31:0] $end
$var parameter 32 ^$ C_HAS_REGCE [31:0] $end
$var parameter 32 _$ C_DATA_WIDTH [31:0] $end
$var parameter 32 `$ C_ADDRB_WIDTH [31:0] $end
$var parameter 32 a$ C_HAS_MEM_OUTPUT_REGS [31:0] $end
$var parameter 32 b$ C_USE_SOFTECC [31:0] $end
$var parameter 32 c$ C_USE_ECC [31:0] $end
$var parameter 32 d$ NUM_STAGES [31:0] $end
$var parameter 32 e$ C_EN_ECC_PIPE [31:0] $end
$var parameter 32 f$ FLOP_DELAY [31:0] $end
$var parameter 32 g$ REG_STAGES [31:0] $end
$upscope $end
$scope module reg_b $end
$var wire 1 :! CLK $end
$var wire 1 =# RST $end
$var wire 1 l! EN $end
$var wire 1 =! REGCE $end
$var wire 32 h$ DIN_I [31:0] $end
$var reg 32 i$ DOUT [31:0] $end
$var wire 1 j$ SBITERR_IN_I $end
$var wire 1 k$ DBITERR_IN_I $end
$var reg 1 l$ SBITERR $end
$var reg 1 m$ DBITERR $end
$var wire 14 n$ RDADDRECC_IN_I [13:0] $end
$var wire 1 2! ECCPIPECE $end
$var reg 14 o$ RDADDRECC [13:0] $end
$var reg 32 p$ out_regs [31:0] $end
$var reg 14 q$ rdaddrecc_regs [13:0] $end
$var reg 1 r$ sbiterr_regs [0:0] $end
$var reg 1 s$ dbiterr_regs [0:0] $end
$var reg 256 t$ init_str [255:0] $end
$var reg 32 u$ init_val [31:0] $end
$var wire 1 v$ en_i $end
$var wire 1 w$ regce_i $end
$var wire 1 x$ rst_i $end
$var reg 32 y$ DIN [31:0] $end
$var reg 14 z$ RDADDRECC_IN [13:0] $end
$var reg 1 {$ SBITERR_IN $end
$var reg 1 |$ DBITERR_IN $end
$var parameter 48 }$ C_FAMILY [47:0] $end
$var parameter 48 ~$ C_XDEVICEFAMILY [47:0] $end
$var parameter 32 !% C_RST_TYPE [31:0] $end
$var parameter 32 "% C_HAS_RST [31:0] $end
$var parameter 32 #% C_RSTRAM [31:0] $end
$var parameter 16 $% C_RST_PRIORITY [15:0] $end
$var parameter 8 %% C_INIT_VAL [7:0] $end
$var parameter 32 &% C_HAS_EN [31:0] $end
$var parameter 32 '% C_HAS_REGCE [31:0] $end
$var parameter 32 (% C_DATA_WIDTH [31:0] $end
$var parameter 32 )% C_ADDRB_WIDTH [31:0] $end
$var parameter 32 *% C_HAS_MEM_OUTPUT_REGS [31:0] $end
$var parameter 32 +% C_USE_SOFTECC [31:0] $end
$var parameter 32 ,% C_USE_ECC [31:0] $end
$var parameter 32 -% NUM_STAGES [31:0] $end
$var parameter 32 .% C_EN_ECC_PIPE [31:0] $end
$var parameter 32 /% FLOP_DELAY [31:0] $end
$var parameter 32 0% REG_STAGES [31:0] $end
$upscope $end
$scope module has_softecc_output_reg_stage $end
$var wire 1 :! CLK $end
$var wire 32 v" DIN [31:0] $end
$var reg 32 1% DOUT [31:0] $end
$var wire 1 x" SBITERR_IN $end
$var wire 1 w" DBITERR_IN $end
$var reg 1 2% SBITERR $end
$var reg 1 3% DBITERR $end
$var wire 14 y" RDADDRECC_IN [13:0] $end
$var reg 14 4% RDADDRECC [13:0] $end
$var reg 32 5% dout_i [31:0] $end
$var reg 1 6% sbiterr_i $end
$var reg 1 7% dbiterr_i $end
$var reg 14 8% rdaddrecc_i [13:0] $end
$var parameter 32 9% C_DATA_WIDTH [31:0] $end
$var parameter 32 :% C_ADDRB_WIDTH [31:0] $end
$var parameter 32 ;% C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 <% C_USE_SOFTECC [31:0] $end
$var parameter 32 =% FLOP_DELAY [31:0] $end
$upscope $end
$scope task write_a $end
$var reg 14 >% addr [13:0] $end
$var reg 1 ?% byte_en [0:0] $end
$var reg 32 @% data [31:0] $end
$var reg 1 A% inj_sbiterr $end
$var reg 1 B% inj_dbiterr $end
$var reg 32 C% current_contents [31:0] $end
$var reg 14 D% address [13:0] $end
$var integer 32 E% i $end
$upscope $end
$scope task write_b $end
$var reg 14 F% addr [13:0] $end
$var reg 1 G% byte_en [0:0] $end
$var reg 32 H% data [31:0] $end
$var reg 32 I% current_contents [31:0] $end
$var reg 14 J% address [13:0] $end
$var integer 32 K% i $end
$upscope $end
$scope task read_a $end
$var reg 14 L% addr [13:0] $end
$var reg 1 M% reset $end
$var reg 14 N% address [13:0] $end
$var integer 32 O% i $end
$upscope $end
$scope task read_b $end
$var reg 14 P% addr [13:0] $end
$var reg 1 Q% reset $end
$var reg 14 R% address [13:0] $end
$var integer 32 S% i $end
$upscope $end
$scope task init_memory $end
$var integer 32 T% i $end
$var integer 32 U% j $end
$var integer 32 V% addr_step $end
$var integer 32 W% status $end
$var reg 32 X% default_data [31:0] $end
$upscope $end
$scope function log2roundup $end
$var integer 32 Y% log2roundup $end
$var integer 32 Z% data_value $end
$var integer 32 [% width $end
$var integer 32 \% cnt $end
$upscope $end
$scope function collision_check $end
$var integer 32 ]% collision_check $end
$var reg 14 ^% addr_a [13:0] $end
$var integer 32 _% iswrite_a $end
$var reg 14 `% addr_b [13:0] $end
$var integer 32 a% iswrite_b $end
$var reg 1 b% c_aw_bw $end
$var reg 1 c% c_aw_br $end
$var reg 1 d% c_ar_bw $end
$var integer 32 e% scaled_addra_to_waddrb_width $end
$var integer 32 f% scaled_addrb_to_waddrb_width $end
$var integer 32 g% scaled_addra_to_waddra_width $end
$var integer 32 h% scaled_addrb_to_waddra_width $end
$var integer 32 i% scaled_addra_to_raddrb_width $end
$var integer 32 j% scaled_addrb_to_raddrb_width $end
$var integer 32 k% scaled_addra_to_raddra_width $end
$var integer 32 l% scaled_addrb_to_raddra_width $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin Block110_22 $end
$var integer 32 m% i $end
$upscope $end
$scope task print_state $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
b0 !!
b0 !"
x!#
b10000000000000000000000000000001 !$
b1010011010110010100111001000011 !%
1"
b0 "!
b100 ""
x"#
b10000000000000000000000000000001 "$
b0 "%
0#
b0 #!
b11 #"
x##
b1100100 #$
b0 #%
0$
b0 $!
b1001 $"
x$#
b111 $$
b100001101000101 $%
b0 %
0%!
b1 %"
bx %#
b100000 %$
b110000 %%
b0 &
bz &!
b1 &"
b11111111111111111011000111100000 &#
b100000 &$
b0 &%
0'
bz '!
b1 '"
bx '#
b100000 '$
b0 '%
1(
b0 (!
b1110000011100100110011101110010011011110110110100101110011011010110100101100110 ("
b0 (#
b100000000000000 ($
b100000 (%
0)
b0 )!
b1110000011100100110011101110010011011110110110100101110011011010110010101101101 )"
bx )#
b100000000000000 )$
b1110 )%
0*
b0 *!
b0 *"
b110000 *#
b100000000000000 *$
b0 *%
b0 +
b0 +!
b110000 +"
b110000 +#
b1 +$
b0 +%
b0 ,
b0 ,!
b0 ,"
b110000 ,#
b1 ,$
b0 ,%
b0 -
bz -!
b100001101000101 -"
b1110000011100100110011101110010011011110110110100101110011011010110100101100110 -#
b1 -$
b0 -%
0.
bz .!
b0 ."
b1110000011100100110011101110010011011110110110100101110011011010110010101101101 .#
b1 .$
b0 .%
0/
bz /!
b110000 /"
b1 /#
b1 /$
b1100100 /%
00
bz 0!
b0 0"
b1110 0#
b1 0$
b1 0%
01
01!
b0 1"
b1110 1#
b1 1$
b0 1%
b0 2
02!
b0 2"
b1110 2#
b1 2$
02%
03
03!
b1 3"
b1110 3#
b1001 3$
03%
04
04!
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 4"
14#
b1110110011010010111001001110100011001010111100000110111 4$
b0 4%
05
05!
b100000 5"
05#
15$
b0 5%
06
06!
b100000 6"
06#
16$
06%
07
07!
b100000000000000 7"
07#
07$
07%
b0 8
08!
b100000000000000 8"
08#
08$
b0 8%
b0 9
09!
b1110 9"
09#
19$
b100000 9%
b0 :
0:!
b0 :"
1:#
0:$
b1110 :%
0;
0;!
b100001101000101 ;"
0;#
0;$
b0 ;%
0<
0<!
b0 <"
0<#
b0 <$
b0 <%
0=
0=!
b110000 ="
0=#
b0 =$
b1100100 =%
0>
0>!
b0 >"
bx >#
b0 >$
b11111111111111 >%
b0 ?
0?!
b0 ?"
x?#
b0 ?$
1?%
0@
0@!
b0 @"
x@#
b0 @$
b0 @%
0A
0A!
b1 A"
bx A#
b0 A$
0A%
0B
0B!
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 B"
xB#
0B$
0B%
0C
0C!
b100000 C"
xC#
0C$
b0 C%
0D
0D!
b100000 D"
b11000100110110001101011010111110110110101100101011011010101111101100111011001010110111001011111011101100011100001011111001101000101111100110001 D#
0D$
b11111111111111 D%
0E
0E!
b100000000000000 E"
b11000010111001001110100011010010111100000110111 E#
0E$
bx E%
0F
0F!
b100000000000000 F"
b11000010111001001110100011010010111100000110111 F#
b0 F$
bx F%
0G
0G!
b1110 G"
b11 G#
0G$
xG%
b0 H
0H!
b0 H"
b1001 H#
b0 H$
bx H%
b0 I
0I!
b0 I"
b0 I#
b0 I$
bx I%
b0 J
0J!
b0 J"
b1 J#
b0 J$
bx J%
b0 K
0K!
b0 K"
b1 K#
0K$
bx K%
b0 L
0L!
b0 L"
b1 L#
0L$
bx L%
0M
0M!
b0 M"
b1110000011100100110011101110010011011110110110100101110011011010110100101100110 M#
b110000 M$
xM%
zN
0N!
b0 N"
b1110000011100100110011101110010011011110110110100101110011011010110010101101101 N#
b0 N$
bx N%
b0 O
0O!
b0 O"
b0 O#
1O$
bx O%
0P
b0 P!
b0 P"
b110000 P#
1P$
bx P%
0Q
b0 Q!
b0 Q"
b1010011010110010100111001000011 Q#
0Q$
xQ%
0R
bz R!
b0 R"
b0 R#
b0 R$
bx R%
zS
bz S!
b10000010100110001001100 S"
b100001101000101 S#
b0 S$
bx S%
bz T
zT!
b0 T"
b0 T#
0T$
b100000000000000 T%
bz U
zU!
b0 U"
b110000 U#
0U$
bx U%
zV
zV!
b0 V"
b0 V#
b11000010111001001110100011010010111100000110111 V$
b1 V%
0W
bz W!
b0 W"
b0 W#
b11000010111001001110100011010010111100000110111 W$
b1 W%
b0 X
bz X!
b0 X"
b0 X#
b1010011010110010100111001000011 X$
b0 X%
b0 Y
bz Y!
b0 Y"
b1 Y#
b0 Y$
b0 Y%
b0 Z
bz Z!
b0 Z"
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 Z#
b0 Z$
b1 Z%
b0 [
z[!
b0 ["
b100000 [#
b100001101000101 [$
b0 [%
b0 \
z\!
b0 \"
b100000 \#
b110000 \$
bx \%
0]
0]!
b11000100110100 ]"
b100000000000000 ]#
b0 ]$
bx ]%
z^
0^!
b110001 ^"
b100000000000000 ^#
b0 ^$
bx ^%
bz _
bz _!
b1000101011100110111010001101001011011010110000101110100011001010110010000100000010100000110111101110111011001010111001000100000011001100110111101110010001000000100100101010000001000000010000000100000001000000010000000111010001000000010000000100000001000000010000000110001001100100010111000110111001100100011000000110100001000000110110101010111 _"
b1110 _#
b100000 _$
bx _%
bz `
bz `!
b0 `"
b0 `#
b1110 `$
bx `%
bz a
b0 a!
b1100100 a"
b100001101000101 a#
b0 a$
bx a%
zb
0b!
b111 b"
b0 b#
b0 b$
xb%
zc
b0 c!
b1 c"
b110000 c#
b0 c$
xc%
0d
0d!
b10000 d"
b0 d#
b0 d$
xd%
0e
0e!
b10000 e"
b0 e#
b0 e$
bx e%
0f
0f!
b10 f"
b0 f#
b1100100 f$
bx f%
zg
0g!
b0 g"
b1 g#
b1 g$
bx g%
zh
0h!
b10 h"
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 h#
b0 h$
bx h%
bz i
0i!
0i"
b100000 i#
b0 i$
bx i%
0j
0j!
0j"
b100000 j#
0j$
bx j%
0k
0k!
b0 k"
b100000000000000 k#
0k$
bx k%
zl
0l!
b0 l"
b100000000000000 l#
0l$
bx l%
zm
0m!
0m"
b1110 m#
0m$
b100000000000000 m%
zn
0n!
0n"
b0 n#
b0 n$
zo
0o!
b11 o"
b0 o#
b0 o$
zp
0p!
b0 p"
b0 p#
b0 p$
zq
0q!
b0 q"
b0 q#
b0 q$
zr
0r!
0r"
b0 r#
0r$
zs
0s!
0s"
b0 s#
0s$
0t
0t!
0t"
b0 t#
b110000 t$
b0 u
b11000100110110001101011010111110110110101100101011011010101111101100111011001010110111001011111011101100011100001011111001101000101111100110001 u!
0u"
b0 u#
b0 u$
b0 v
b11000010111001001110100011010010111100000110111 v!
b0 v"
b0 v#
1v$
b0 w
b11000010111001001110100011010010111100000110111 w!
0w"
b0 w#
1w$
0x
b10111000101111 x!
0x"
b10000010100110001001100 x#
0x$
b0 y
b0 y!
b0 y"
b0 y#
b0 y$
b0 z
b0 z!
b0 z"
b1100100 z#
b0 z$
b0 {
b1001110010011110100111001000101 {!
b0 {"
b0 {#
0{$
b0 |
b0 |!
b0 |"
b0 |#
0|$
b0 }
b1 }!
b0 }"
b0 }#
b11000010111001001110100011010010111100000110111 }$
b0 ~
b0 ~!
x~"
b10000000000000000000000000000001 ~#
b11000010111001001110100011010010111100000110111 ~$
$end
#100
b0 >#
0?#
1@#
b0 A#
0B#
0C#
#5000
1!
0!#
0"#
1'
b0 ,
16!
b0 L%
0M%
b0 N%
#5100
b0x00000000xx000xx000xx &
b100000000110001100011 @$
b100000000110001100011 A$
b100000000110001100011 R$
b0 S$
b100000000110001100011 p"
b100000000110001100011 w
#10000
0!
0"
0'
0(
06!
#15000
1!
b0x000x0001000x000xxx0x0xxx00x1 &
1'
b100 ,
b1 -
16!
b1 P!
b0 Q!
b1 k"
b1 u
#15100
b1 >#
b100000000110001100011 p"
#20000
0!
0'
06!
#25000
1!
b0x000x000xx00x000x0xxx00x10001x &
1'
b1000 ,
b10 -
16!
b1 L%
b1 N%
b10 P!
b0 Q!
b10 k"
b10 u
#25100
b0x000x000x000x000x000x0001x001x &
b10 >#
b110011 @$
b110011 A$
b110011 R$
b0 S$
b110011 p"
b110011 w
#30000
0!
0'
06!
#35000
1!
b0xx00xx00xx00xx00xx00xx00110011 &
1'
b1100 ,
b11 -
16!
b10 L%
b10 N%
b11 P!
b0 Q!
b11 k"
b11 u
#35100
b0xx00xx00xx00xx0xxx00xx00110011 &
b11 >#
b100000000110011 @$
b100000000110011 A$
b100000000110011 R$
b0 S$
b100000000110011 p"
b100000000110011 w
#40000
0!
1#
1$
b10000 %
0'
1)
1*
b10000 +
06!
#45000
1!
b0x00000000xx00xx &
1'
b11100 ,
b111 -
16!
b11 L%
b11 N%
b111 P!
b0 Q!
b111 k"
b111 u
#45100
b0x000x0x00x0xxx &
b111 >#
b10001010010111 @$
b10001010010111 A$
b10001010010111 R$
b0 S$
b10001010010111 p"
b10001010010111 w
#50000
0!
0$
0'
0*
06!
#55000
1!
b0x000x0x00x0xxx &
1'
b100000 ,
b1000 -
16!
b111 L%
b111 N%
b1000 P!
b0 Q!
b1000 k"
b1000 u
#55100
bx0000000000000000x00xx &
b1000 >#
b11111111111000000000000000010011 @$
b11111111111000000000000000010011 A$
b11111111111000000000000000010011 R$
b0 S$
b11111111111000000000000000010011 p"
b11111111111000000000000000010011 w
#60000
0!
1"
bx0000000000000000x00xx &
0'
1(
b0 ,
b0 -
06!
b0 P!
b0 Q!
b0 k"
b0 u
#60100
b0 >#
#65000
1!
1'
b0 ,
16!
b0 L%
b0 N%
#65100
b0x00000000xx000xx000xx &
b100000000110001100011 @$
b100000000110001100011 A$
b100000000110001100011 R$
b0 S$
b100000000110001100011 p"
b100000000110001100011 w
#70000
0!
0"
0'
0(
06!
#75000
1!
b0x000x0001000x000xxx0x0xxx00x1 &
1'
b100 ,
b1 -
16!
b1 P!
b0 Q!
b1 k"
b1 u
#75100
b1 >#
b100000000110001100011 p"
#80000
0!
1$
b11111111111111111111111111111100 %
0'
1*
b11111111111111111111111111111100 +
06!
#85000
1!
b0x00000000xx000xx000xx &
1'
b0 ,
b0 -
16!
b1 L%
b1 N%
b0 P!
b0 Q!
b0 k"
b0 u
#85100
b0xx00xx &
b0 >#
b110011 @$
b110011 A$
b110011 R$
b0 S$
b110011 p"
b110011 w
#90000
0!
0'
06!
#95000
1!
b0xx00xx &
1'
b11111111111111111111111111111100 ,
b11111111111111 -
16!
b0 L%
b0 N%
b11111111111111 P!
b0 Q!
b11111111111111 k"
b11111111111111 u
#95100
b0x00000000xx000xx000xx &
b11111111111111 >#
b100000000110001100011 @$
b100000000110001100011 A$
b100000000110001100011 R$
b0 S$
b100000000110001100011 p"
b100000000110001100011 w
